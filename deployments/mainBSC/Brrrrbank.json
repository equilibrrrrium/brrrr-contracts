{
  "address": "0x966372b4CD856A0E231490893E39cF94Ff1dF602",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "at",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "allocateSeigniorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "brrrr",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "brrrrbankHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardReceived",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "canClaimReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "canWithdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBrrrrPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "getLastSnapshotIndexOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "governanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_brrrr",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_share",
          "type": "address"
        },
        {
          "internalType": "contract ITreasury",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestSnapshotIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastSnapshotIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardEarned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochTimerStart",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEpochPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardLockupEpochs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawLockupEpochs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardLockupEpochs",
          "type": "uint256"
        }
      ],
      "name": "setLockUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "share",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLockupEpochs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a93de68dc3c4dd249a9f8ab2cd51400c9a2f55e8073682761fbaa1f0d9c4b8d",
  "receipt": {
    "to": null,
    "from": "0x9F6051748Fa8A4b308240bbb7DEEAE5e2b47DcE1",
    "contractAddress": "0x966372b4CD856A0E231490893E39cF94Ff1dF602",
    "transactionIndex": 201,
    "gasUsed": "2228173",
    "logsBloom": "0x
    "blockHash": "0x183f520f88a141237d99f18fad7ba6fc6bb25a992fce5d91ea7e0df407806656",
    "transactionHash": "0x0a93de68dc3c4dd249a9f8ab2cd51400c9a2f55e8073682761fbaa1f0d9c4b8d",
    "logs": [],
    "blockNumber": 16341242,
    "cumulativeGasUsed": "23105019",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "be7b10f3a2d7048c64c26b11f6bac89b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brrrr\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"brrrrbankHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"canClaimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"canWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBrrrrPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getLastSnapshotIndexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_brrrr\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_share\",\"type\":\"address\"},{\"internalType\":\"contract ITreasury\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestSnapshotIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastSnapshotIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochTimerStart\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLockupEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawLockupEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardLockupEpochs\",\"type\":\"uint256\"}],\"name\":\"setLockUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLockupEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Brrrrbank.sol\":\"Brrrrbank\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/Brrrrbank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"./utils/ContractGuard.sol\\\";\\r\\nimport \\\"./interfaces/IBasisAsset.sol\\\";\\r\\nimport \\\"./interfaces/ITreasury.sol\\\";\\r\\n\\r\\ncontract ShareWrapper {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IERC20 public share;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function stake(uint256 amount) public virtual {\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\r\\n        share.safeTransferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 amount) public virtual {\\r\\n        uint256 memberShare = _balances[msg.sender];\\r\\n        require(memberShare >= amount, \\\"Brrrrbank: withdraw request greater than staked amount\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        _balances[msg.sender] = memberShare.sub(amount);\\r\\n        share.safeTransfer(msg.sender, amount);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Brrrrbank is ShareWrapper, ContractGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /* ========== DATA STRUCTURES ========== */\\r\\n\\r\\n    struct Memberseat {\\r\\n        uint256 lastSnapshotIndex;\\r\\n        uint256 rewardEarned;\\r\\n        uint256 epochTimerStart;\\r\\n    }\\r\\n\\r\\n    struct BrrrrbankSnapshot {\\r\\n        uint256 time;\\r\\n        uint256 rewardReceived;\\r\\n        uint256 rewardPerShare;\\r\\n    }\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    // governance\\r\\n    address public operator;\\r\\n\\r\\n    // flags\\r\\n    bool public initialized = false;\\r\\n\\r\\n    IERC20 public brrrr;\\r\\n    ITreasury public treasury;\\r\\n\\r\\n    mapping(address => Memberseat) public members;\\r\\n    BrrrrbankSnapshot[] public brrrrbankHistory;\\r\\n\\r\\n    uint256 public withdrawLockupEpochs;\\r\\n    uint256 public rewardLockupEpochs;\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event Initialized(address indexed executor, uint256 at);\\r\\n    event Staked(address indexed user, uint256 amount);\\r\\n    event Withdrawn(address indexed user, uint256 amount);\\r\\n    event RewardPaid(address indexed user, uint256 reward);\\r\\n    event RewardAdded(address indexed user, uint256 reward);\\r\\n\\r\\n    /* ========== Modifiers =============== */\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        require(operator == msg.sender, \\\"Brrrrbank: caller is not the operator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier memberExists() {\\r\\n        require(balanceOf(msg.sender) > 0, \\\"Brrrrbank: The member does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier updateReward(address member) {\\r\\n        if (member != address(0)) {\\r\\n            Memberseat memory seat = members[member];\\r\\n            seat.rewardEarned = earned(member);\\r\\n            seat.lastSnapshotIndex = latestSnapshotIndex();\\r\\n            members[member] = seat;\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier notInitialized() {\\r\\n        require(!initialized, \\\"Brrrrbank: already initialized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== GOVERNANCE ========== */\\r\\n\\r\\n    function initialize(\\r\\n        IERC20 _brrrr,\\r\\n        IERC20 _share,\\r\\n        ITreasury _treasury\\r\\n    ) public notInitialized {\\r\\n        brrrr = _brrrr;\\r\\n        share = _share;\\r\\n        treasury = _treasury;\\r\\n\\r\\n        BrrrrbankSnapshot memory genesisSnapshot = BrrrrbankSnapshot({time: block.number, rewardReceived: 0, rewardPerShare: 0});\\r\\n        brrrrbankHistory.push(genesisSnapshot);\\r\\n\\r\\n        withdrawLockupEpochs = 6; // Lock for 6 epochs (36h) before release withdraw\\r\\n        rewardLockupEpochs = 3; // Lock for 3 epochs (18h) before release claimReward\\r\\n\\r\\n        initialized = true;\\r\\n        operator = msg.sender;\\r\\n        emit Initialized(msg.sender, block.number);\\r\\n    }\\r\\n\\r\\n    function setOperator(address _operator) external onlyOperator {\\r\\n        operator = _operator;\\r\\n    }\\r\\n\\r\\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external onlyOperator {\\r\\n        require(_withdrawLockupEpochs >= _rewardLockupEpochs && _withdrawLockupEpochs <= 56, \\\"_withdrawLockupEpochs: out of range\\\"); // <= 2 week\\r\\n        withdrawLockupEpochs = _withdrawLockupEpochs;\\r\\n        rewardLockupEpochs = _rewardLockupEpochs;\\r\\n    }\\r\\n\\r\\n    /* ========== VIEW FUNCTIONS ========== */\\r\\n\\r\\n    // =========== Snapshot getters\\r\\n\\r\\n    function latestSnapshotIndex() public view returns (uint256) {\\r\\n        return brrrrbankHistory.length.sub(1);\\r\\n    }\\r\\n\\r\\n    function getLatestSnapshot() internal view returns (BrrrrbankSnapshot memory) {\\r\\n        return brrrrbankHistory[latestSnapshotIndex()];\\r\\n    }\\r\\n\\r\\n    function getLastSnapshotIndexOf(address member) public view returns (uint256) {\\r\\n        return members[member].lastSnapshotIndex;\\r\\n    }\\r\\n\\r\\n    function getLastSnapshotOf(address member) internal view returns (BrrrrbankSnapshot memory) {\\r\\n        return brrrrbankHistory[getLastSnapshotIndexOf(member)];\\r\\n    }\\r\\n\\r\\n    function canWithdraw(address member) external view returns (bool) {\\r\\n        return members[member].epochTimerStart.add(withdrawLockupEpochs) <= treasury.epoch();\\r\\n    }\\r\\n\\r\\n    function canClaimReward(address member) external view returns (bool) {\\r\\n        return members[member].epochTimerStart.add(rewardLockupEpochs) <= treasury.epoch();\\r\\n    }\\r\\n\\r\\n    function epoch() external view returns (uint256) {\\r\\n        return treasury.epoch();\\r\\n    }\\r\\n\\r\\n    function nextEpochPoint() external view returns (uint256) {\\r\\n        return treasury.nextEpochPoint();\\r\\n    }\\r\\n\\r\\n    function getBrrrrPrice() external view returns (uint256) {\\r\\n        return treasury.getBrrrrPrice();\\r\\n    }\\r\\n\\r\\n    // =========== Member getters\\r\\n\\r\\n    function rewardPerShare() public view returns (uint256) {\\r\\n        return getLatestSnapshot().rewardPerShare;\\r\\n    }\\r\\n\\r\\n    function earned(address member) public view returns (uint256) {\\r\\n        uint256 latestRPS = getLatestSnapshot().rewardPerShare;\\r\\n        uint256 storedRPS = getLastSnapshotOf(member).rewardPerShare;\\r\\n\\r\\n        return balanceOf(member).mul(latestRPS.sub(storedRPS)).div(1e18).add(members[member].rewardEarned);\\r\\n    }\\r\\n\\r\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n\\r\\n    function stake(uint256 amount) public override onlyOneBlock updateReward(msg.sender) {\\r\\n        require(amount > 0, \\\"Brrrrbank: Cannot stake 0\\\");\\r\\n        super.stake(amount);\\r\\n        members[msg.sender].epochTimerStart = treasury.epoch(); // reset timer\\r\\n        emit Staked(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 amount) public override onlyOneBlock memberExists updateReward(msg.sender) {\\r\\n        require(amount > 0, \\\"Brrrrbank: Cannot withdraw 0\\\");\\r\\n        require(members[msg.sender].epochTimerStart.add(withdrawLockupEpochs) <= treasury.epoch(), \\\"Brrrrbank: still in withdraw lockup\\\");\\r\\n        claimReward();\\r\\n        super.withdraw(amount);\\r\\n        emit Withdrawn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function exit() external {\\r\\n        withdraw(balanceOf(msg.sender));\\r\\n    }\\r\\n\\r\\n    function claimReward() public updateReward(msg.sender) {\\r\\n        uint256 reward = members[msg.sender].rewardEarned;\\r\\n        if (reward > 0) {\\r\\n            require(members[msg.sender].epochTimerStart.add(rewardLockupEpochs) <= treasury.epoch(), \\\"Brrrrbank: still in reward lockup\\\");\\r\\n            members[msg.sender].epochTimerStart = treasury.epoch(); // reset timer\\r\\n            members[msg.sender].rewardEarned = 0;\\r\\n            brrrr.safeTransfer(msg.sender, reward);\\r\\n            emit RewardPaid(msg.sender, reward);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function allocateSeigniorage(uint256 amount) external onlyOneBlock onlyOperator {\\r\\n        require(amount > 0, \\\"Brrrrbank: Cannot allocate 0\\\");\\r\\n        require(totalSupply() > 0, \\\"Brrrrbank: Cannot allocate when totalSupply is 0\\\");\\r\\n\\r\\n        // Create & add new snapshot\\r\\n        uint256 prevRPS = getLatestSnapshot().rewardPerShare;\\r\\n        uint256 nextRPS = prevRPS.add(amount.mul(1e18).div(totalSupply()));\\r\\n\\r\\n        BrrrrbankSnapshot memory newSnapshot = BrrrrbankSnapshot({time: block.number, rewardReceived: amount, rewardPerShare: nextRPS});\\r\\n        brrrrbankHistory.push(newSnapshot);\\r\\n\\r\\n        brrrr.safeTransferFrom(msg.sender, address(this), amount);\\r\\n        emit RewardAdded(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function governanceRecoverUnsupported(\\r\\n        IERC20 _token,\\r\\n        uint256 _amount,\\r\\n        address _to\\r\\n    ) external onlyOperator {\\r\\n        // do not allow to drain core tokens\\r\\n        require(address(_token) != address(brrrr), \\\"brrrr\\\");\\r\\n        require(address(_token) != address(share), \\\"brrrrshare\\\");\\r\\n        _token.safeTransfer(_to, _amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x666ca2abd9b9dfe623f41d1f0ca049a7a286fce7259dc50f1b05db84c6a9e5ea\",\"license\":\"MIT\"},\"contracts/interfaces/IBasisAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\ninterface IBasisAsset {\\r\\n    function mint(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n\\r\\n    function burnFrom(address from, uint256 amount) external;\\r\\n\\r\\n    function isOperator() external returns (bool);\\r\\n\\r\\n    function operator() external view returns (address);\\r\\n\\r\\n    function transferOperator(address newOperator_) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x19e98501d7bec2e65e5e316e580d19e8e8b9421b755afa748d7fd821afe2c39e\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface ITreasury {\\r\\n    function epoch() external view returns (uint256);\\r\\n\\r\\n    function nextEpochPoint() external view returns (uint256);\\r\\n\\r\\n    function getBrrrrPrice() external view returns (uint256);\\r\\n\\r\\n    function buyBonds(uint256 amount, uint256 targetPrice) external;\\r\\n\\r\\n    function redeemBonds(uint256 amount, uint256 targetPrice) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc82558f649945dc3e4561f107819334019d68ddb9eafda8527137f31e2b9e97d\",\"license\":\"MIT\"},\"contracts/utils/ContractGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ncontract ContractGuard {\\r\\n    mapping(uint256 => mapping(address => bool)) private _status;\\r\\n\\r\\n    function checkSameOriginReentranted() internal view returns (bool) {\\r\\n        return _status[block.number][tx.origin];\\r\\n    }\\r\\n\\r\\n    function checkSameSenderReentranted() internal view returns (bool) {\\r\\n        return _status[block.number][msg.sender];\\r\\n    }\\r\\n\\r\\n    modifier onlyOneBlock() {\\r\\n        require(!checkSameOriginReentranted(), \\\"ContractGuard: one block, one function\\\");\\r\\n        require(!checkSameSenderReentranted(), \\\"ContractGuard: one block, one function\\\");\\r\\n\\r\\n        _;\\r\\n\\r\\n        _status[block.number][tx.origin] = true;\\r\\n        _status[block.number][msg.sender] = true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfd892206cee6f77b10aca166d73fe0dfc3cba86255766bd377f9e1be649d699f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526004805460ff60a01b1916905534801561001d57600080fd5b5061278d8061002d6000396000f3fe608060405234801561001057600080fd5b50600436106101ce5760003560e01c806354575af411610104578063a694fc3a116100a2578063c0c53b8b11610071578063c0c53b8b146104e1578063c5967c2614610526578063e9fad8ee1461052e578063f61d520514610536576101ce565b8063a694fc3a14610481578063a8d5fd651461049e578063b3ab15fb146104a6578063b88a802f146104d9576101ce565b806370a08231116100de57806370a08231146103f6578063714b465814610429578063900cf0cf1461045c57806397ffe1d714610464576101ce565b806354575af41461037a578063570ca735146103bd57806361d027b3146103ee576101ce565b80631e85cd65116101715780633de3c0da1161014b5780633de3c0da146103455780633f9e3f04146103625780634256d24c1461036a578063446a2ec814610372576101ce565b80631e85cd65146102fb5780632e1a7d4d146103035780632ffaaa0914610322576101ce565b806308ae4b0c116101ad57806308ae4b0c14610267578063158ef93e146102b857806318160ddd146102c057806319262d30146102c8576101ce565b80628cc262146101d3578063022ba18d14610218578063046335d014610220575b600080fd5b610206600480360360208110156101e957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661053e565b60408051918252519081900360200190f35b6102066105cc565b6102536004803603602081101561023657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166105d2565b604080519115158252519081900360200190f35b61029a6004803603602081101561027d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166106a6565b60408051938452602084019290925282820152519081900360600190f35b6102536106c7565b6102066106e8565b610253600480360360208110156102de57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166106ee565b6102066107ba565b6103206004803603602081101561031957600080fd5b50356107c0565b005b6103206004803603604081101561033857600080fd5b5080359060200135610bae565b61029a6004803603602081101561035b57600080fd5b5035610c8f565b610206610cbf565b610206610cd5565b610206610d71565b6103206004803603606081101561039057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359160409091013516610d84565b6103c5610f2e565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6103c5610f4a565b6102066004803603602081101561040c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610f66565b6102066004803603602081101561043f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610f8e565b610206610fb6565b6103206004803603602081101561047a57600080fd5b5035611021565b6103206004803603602081101561049757600080fd5b50356113bf565b6103c56116e4565b610320600480360360208110156104bc57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611700565b6103206117b7565b610320600480360360608110156104f757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160409091013516611aa3565b610206611ce9565b610320611d54565b6103c5611d67565b600080610549611d83565b604001519050600061055a84611ddb565b60409081015173ffffffffffffffffffffffffffffffffffffffff86166000908152600760205291909120600101549091506105c4906105be670de0b6b3a76400006105b86105a98787611e36565b6105b28a610f66565b90611eb2565b90611f2c565b90611fad565b949350505050565b600a5481565b600654604080517f900cf0cf000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163900cf0cf916004808301926020929190829003018186803b15801561063d57600080fd5b505afa158015610651573d6000803e3d6000fd5b505050506040513d602081101561066757600080fd5b5051600a5473ffffffffffffffffffffffffffffffffffffffff841660009081526007602052604090206002015461069e91611fad565b111592915050565b60076020526000908152604090208054600182015460029092015490919083565b60045474010000000000000000000000000000000000000000900460ff1681565b60015490565b600654604080517f900cf0cf000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163900cf0cf916004808301926020929190829003018186803b15801561075957600080fd5b505afa15801561076d573d6000803e3d6000fd5b505050506040513d602081101561078357600080fd5b505160095473ffffffffffffffffffffffffffffffffffffffff841660009081526007602052604090206002015461069e91611fad565b60095481565b6107c8612021565b1561081e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806127326026913960400191505060405180910390fd5b610826612042565b1561087c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806127326026913960400191505060405180910390fd5b600061088733610f66565b116108dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806125d16024913960400191505060405180910390fd5b338015610991576108ec6125af565b5073ffffffffffffffffffffffffffffffffffffffff811660009081526007602090815260409182902082516060810184528154815260018201549281019290925260020154918101919091526109428261053e565b602082015261094f610cbf565b815273ffffffffffffffffffffffffffffffffffffffff8216600090815260076020908152604091829020835181559083015160018201559101516002909101555b60008211610a0057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f427272727262616e6b3a2043616e6e6f74207769746864726177203000000000604482015290519081900360640190fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6857600080fd5b505afa158015610a7c573d6000803e3d6000fd5b505050506040513d6020811015610a9257600080fd5b505160095433600090815260076020526040902060020154610ab391611fad565b1115610b0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061263b6023913960400191505060405180910390fd5b610b126117b7565b610b1b82612063565b60408051838152905133917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a25050436000908152600360209081526040808320328452909152808220805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091821681179092553384529190922080549091169091179055565b60045473ffffffffffffffffffffffffffffffffffffffff163314610c1e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806126166025913960400191505060405180910390fd5b808210158015610c2f575060388211155b610c84576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806126b56023913960400191505060405180910390fd5b600991909155600a55565b60088181548110610c9c57fe5b600091825260209091206003909102018054600182015460029092015490925083565b600854600090610cd0906001611e36565b905090565b600654604080517f4256d24c000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691634256d24c916004808301926020929190829003018186803b158015610d4057600080fd5b505afa158015610d54573d6000803e3d6000fd5b505050506040513d6020811015610d6a57600080fd5b5051905090565b6000610d7b611d83565b60400151905090565b60045473ffffffffffffffffffffffffffffffffffffffff163314610df4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806126166025913960400191505060405180910390fd5b60055473ffffffffffffffffffffffffffffffffffffffff84811691161415610e7e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f6272727272000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60005473ffffffffffffffffffffffffffffffffffffffff84811691161415610f0857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6272727272736861726500000000000000000000000000000000000000000000604482015290519081900360640190fd5b610f2973ffffffffffffffffffffffffffffffffffffffff8416828461211a565b505050565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b73ffffffffffffffffffffffffffffffffffffffff1660009081526007602052604090205490565b600654604080517f900cf0cf000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163900cf0cf916004808301926020929190829003018186803b158015610d4057600080fd5b611029612021565b1561107f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806127326026913960400191505060405180910390fd5b611087612042565b156110dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806127326026913960400191505060405180910390fd5b60045473ffffffffffffffffffffffffffffffffffffffff16331461114d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806126166025913960400191505060405180910390fd5b600081116111bc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f427272727262616e6b3a2043616e6e6f7420616c6c6f63617465203000000000604482015290519081900360640190fd5b60006111c66106e8565b1161121c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806126d86030913960400191505060405180910390fd5b6000611226611d83565b604001519050600061125561124e61123c6106e8565b6105b886670de0b6b3a7640000611eb2565b8390611fad565b905061125f6125af565b5060408051606081018252438152602081018581529181018381526008805460018101825560009190915282517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee360039092029182015592517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee4840155517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee59092019190915560055461132a9073ffffffffffffffffffffffffffffffffffffffff163330876121a7565b60408051858152905133917fac24935fd910bc682b5ccb1a07b718cadf8cf2f6d1404c4f3ddc3662dae40e29919081900360200190a25050436000908152600360209081526040808320328452909152808220805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00918216811790925533845291909220805490911690911790555050565b6113c7612021565b1561141d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806127326026913960400191505060405180910390fd5b611425612042565b1561147b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806127326026913960400191505060405180910390fd5b33801561152f5761148a6125af565b5073ffffffffffffffffffffffffffffffffffffffff811660009081526007602090815260409182902082516060810184528154815260018201549281019290925260020154918101919091526114e08261053e565b60208201526114ed610cbf565b815273ffffffffffffffffffffffffffffffffffffffff8216600090815260076020908152604091829020835181559083015160018201559101516002909101555b6000821161159e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f427272727262616e6b3a2043616e6e6f74207374616b65203000000000000000604482015290519081900360640190fd5b6115a782612242565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561160f57600080fd5b505afa158015611623573d6000803e3d6000fd5b505050506040513d602081101561163957600080fd5b505133600081815260076020908152604091829020600201939093558051858152905191927f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d92918290030190a25050436000908152600360209081526040808320328452909152808220805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091821681179092553384529190922080549091169091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60045473ffffffffffffffffffffffffffffffffffffffff163314611770576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806126166025913960400191505060405180910390fd5b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b33801561186b576117c66125af565b5073ffffffffffffffffffffffffffffffffffffffff8116600090815260076020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915261181c8261053e565b6020820152611829610cbf565b815273ffffffffffffffffffffffffffffffffffffffff8216600090815260076020908152604091829020835181559083015160018201559101516002909101555b336000908152600760205260409020600101548015611a9f57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118ec57600080fd5b505afa158015611900573d6000803e3d6000fd5b505050506040513d602081101561191657600080fd5b5051600a543360009081526007602052604090206002015461193791611fad565b111561198e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806125f56021913960400191505060405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119f657600080fd5b505afa158015611a0a573d6000803e3d6000fd5b505050506040513d6020811015611a2057600080fd5b50513360008181526007602052604081206002810193909355600190920191909155600554611a689173ffffffffffffffffffffffffffffffffffffffff909116908361211a565b60408051828152905133917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b5050565b60045474010000000000000000000000000000000000000000900460ff1615611b2d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f427272727262616e6b3a20616c726561647920696e697469616c697a65640000604482015290519081900360640190fd5b6005805473ffffffffffffffffffffffffffffffffffffffff8086167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600080548584169083161790556006805492841692909116919091179055611b976125af565b50604080516060810182524380825260006020808401828152848601838152600880546001810182559452855160039485027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee381019190915591517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee4830155517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee5909101556006600955600a91909155600480547fffffffffffffffffffffffff00000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90911674010000000000000000000000000000000000000000171633908117909155845192835293519293927f25ff68dd81b34665b5ba7e553ee5511bf6812e12adb4a7e2c0d9e26b3099ce799281900390910190a250505050565b600654604080517fc5967c26000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163c5967c26916004808301926020929190829003018186803b158015610d4057600080fd5b611d65611d6033610f66565b6107c0565b565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b611d8b6125af565b6008611d95610cbf565b81548110611d9f57fe5b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905090565b611de36125af565b6008611dee83610f8e565b81548110611df857fe5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b600082821115611ea757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b600082611ec157506000611eac565b82820282848281611ece57fe5b0414611f25576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806126946021913960400191505060405180910390fd5b9392505050565b6000808211611f9c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611fa557fe5b049392505050565b600082820183811015611f2557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b43600090815260036020908152604080832032845290915290205460ff1690565b43600090815260036020908152604080832033845290915290205460ff1690565b33600090815260026020526040902054818110156120cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061265e6036913960400191505060405180910390fd5b6001546120d99083611e36565b6001556120e68183611e36565b336000818152600260205260408120929092559054611a9f9173ffffffffffffffffffffffffffffffffffffffff90911690845b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610f299084906122a8565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261223c9085906122a8565b50505050565b60015461224f9082611fad565b6001553360009081526002602052604090205461226c9082611fad565b3360008181526002602052604081209290925590546122a59173ffffffffffffffffffffffffffffffffffffffff9091169030846121a7565b50565b606061230a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166123809092919063ffffffff16565b805190915015610f295780806020019051602081101561232957600080fd5b5051610f29576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612708602a913960400191505060405180910390fd5b60606105c4848460008585612394856124eb565b6123ff57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061246957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161242c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146124cb576040519150601f19603f3d011682016040523d82523d6000602084013e6124d0565b606091505b50915091506124e08282866124f1565b979650505050505050565b3b151590565b60608315612500575081611f25565b8251156125105782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561257457818101518382015260200161255c565b50505050905090810190601f1680156125a15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6040518060600160405280600081526020016000815260200160008152509056fe427272727262616e6b3a20546865206d656d62657220646f6573206e6f74206578697374427272727262616e6b3a207374696c6c20696e20726577617264206c6f636b7570427272727262616e6b3a2063616c6c6572206973206e6f7420746865206f70657261746f72427272727262616e6b3a207374696c6c20696e207769746864726177206c6f636b7570427272727262616e6b3a20776974686472617720726571756573742067726561746572207468616e207374616b656420616d6f756e74536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775f77697468647261774c6f636b757045706f6368733a206f7574206f662072616e6765427272727262616e6b3a2043616e6e6f7420616c6c6f63617465207768656e20746f74616c537570706c7920697320305361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436f6e747261637447756172643a206f6e6520626c6f636b2c206f6e652066756e6374696f6ea2646970667358221220775d883ad2f56dff80c15a462821c189f802a9348c7b4d7e698ac91b647282b664736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ce5760003560e01c806354575af411610104578063a694fc3a116100a2578063c0c53b8b11610071578063c0c53b8b146104e1578063c5967c2614610526578063e9fad8ee1461052e578063f61d520514610536576101ce565b8063a694fc3a14610481578063a8d5fd651461049e578063b3ab15fb146104a6578063b88a802f146104d9576101ce565b806370a08231116100de57806370a08231146103f6578063714b465814610429578063900cf0cf1461045c57806397ffe1d714610464576101ce565b806354575af41461037a578063570ca735146103bd57806361d027b3146103ee576101ce565b80631e85cd65116101715780633de3c0da1161014b5780633de3c0da146103455780633f9e3f04146103625780634256d24c1461036a578063446a2ec814610372576101ce565b80631e85cd65146102fb5780632e1a7d4d146103035780632ffaaa0914610322576101ce565b806308ae4b0c116101ad57806308ae4b0c14610267578063158ef93e146102b857806318160ddd146102c057806319262d30146102c8576101ce565b80628cc262146101d3578063022ba18d14610218578063046335d014610220575b600080fd5b610206600480360360208110156101e957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661053e565b60408051918252519081900360200190f35b6102066105cc565b6102536004803603602081101561023657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166105d2565b604080519115158252519081900360200190f35b61029a6004803603602081101561027d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166106a6565b60408051938452602084019290925282820152519081900360600190f35b6102536106c7565b6102066106e8565b610253600480360360208110156102de57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166106ee565b6102066107ba565b6103206004803603602081101561031957600080fd5b50356107c0565b005b6103206004803603604081101561033857600080fd5b5080359060200135610bae565b61029a6004803603602081101561035b57600080fd5b5035610c8f565b610206610cbf565b610206610cd5565b610206610d71565b6103206004803603606081101561039057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359160409091013516610d84565b6103c5610f2e565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6103c5610f4a565b6102066004803603602081101561040c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610f66565b6102066004803603602081101561043f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610f8e565b610206610fb6565b6103206004803603602081101561047a57600080fd5b5035611021565b6103206004803603602081101561049757600080fd5b50356113bf565b6103c56116e4565b610320600480360360208110156104bc57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611700565b6103206117b7565b610320600480360360608110156104f757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160409091013516611aa3565b610206611ce9565b610320611d54565b6103c5611d67565b600080610549611d83565b604001519050600061055a84611ddb565b60409081015173ffffffffffffffffffffffffffffffffffffffff86166000908152600760205291909120600101549091506105c4906105be670de0b6b3a76400006105b86105a98787611e36565b6105b28a610f66565b90611eb2565b90611f2c565b90611fad565b949350505050565b600a5481565b600654604080517f900cf0cf000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163900cf0cf916004808301926020929190829003018186803b15801561063d57600080fd5b505afa158015610651573d6000803e3d6000fd5b505050506040513d602081101561066757600080fd5b5051600a5473ffffffffffffffffffffffffffffffffffffffff841660009081526007602052604090206002015461069e91611fad565b111592915050565b60076020526000908152604090208054600182015460029092015490919083565b60045474010000000000000000000000000000000000000000900460ff1681565b60015490565b600654604080517f900cf0cf000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163900cf0cf916004808301926020929190829003018186803b15801561075957600080fd5b505afa15801561076d573d6000803e3d6000fd5b505050506040513d602081101561078357600080fd5b505160095473ffffffffffffffffffffffffffffffffffffffff841660009081526007602052604090206002015461069e91611fad565b60095481565b6107c8612021565b1561081e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806127326026913960400191505060405180910390fd5b610826612042565b1561087c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806127326026913960400191505060405180910390fd5b600061088733610f66565b116108dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806125d16024913960400191505060405180910390fd5b338015610991576108ec6125af565b5073ffffffffffffffffffffffffffffffffffffffff811660009081526007602090815260409182902082516060810184528154815260018201549281019290925260020154918101919091526109428261053e565b602082015261094f610cbf565b815273ffffffffffffffffffffffffffffffffffffffff8216600090815260076020908152604091829020835181559083015160018201559101516002909101555b60008211610a0057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f427272727262616e6b3a2043616e6e6f74207769746864726177203000000000604482015290519081900360640190fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6857600080fd5b505afa158015610a7c573d6000803e3d6000fd5b505050506040513d6020811015610a9257600080fd5b505160095433600090815260076020526040902060020154610ab391611fad565b1115610b0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061263b6023913960400191505060405180910390fd5b610b126117b7565b610b1b82612063565b60408051838152905133917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a25050436000908152600360209081526040808320328452909152808220805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091821681179092553384529190922080549091169091179055565b60045473ffffffffffffffffffffffffffffffffffffffff163314610c1e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806126166025913960400191505060405180910390fd5b808210158015610c2f575060388211155b610c84576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806126b56023913960400191505060405180910390fd5b600991909155600a55565b60088181548110610c9c57fe5b600091825260209091206003909102018054600182015460029092015490925083565b600854600090610cd0906001611e36565b905090565b600654604080517f4256d24c000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691634256d24c916004808301926020929190829003018186803b158015610d4057600080fd5b505afa158015610d54573d6000803e3d6000fd5b505050506040513d6020811015610d6a57600080fd5b5051905090565b6000610d7b611d83565b60400151905090565b60045473ffffffffffffffffffffffffffffffffffffffff163314610df4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806126166025913960400191505060405180910390fd5b60055473ffffffffffffffffffffffffffffffffffffffff84811691161415610e7e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f6272727272000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60005473ffffffffffffffffffffffffffffffffffffffff84811691161415610f0857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6272727272736861726500000000000000000000000000000000000000000000604482015290519081900360640190fd5b610f2973ffffffffffffffffffffffffffffffffffffffff8416828461211a565b505050565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b73ffffffffffffffffffffffffffffffffffffffff1660009081526007602052604090205490565b600654604080517f900cf0cf000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163900cf0cf916004808301926020929190829003018186803b158015610d4057600080fd5b611029612021565b1561107f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806127326026913960400191505060405180910390fd5b611087612042565b156110dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806127326026913960400191505060405180910390fd5b60045473ffffffffffffffffffffffffffffffffffffffff16331461114d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806126166025913960400191505060405180910390fd5b600081116111bc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f427272727262616e6b3a2043616e6e6f7420616c6c6f63617465203000000000604482015290519081900360640190fd5b60006111c66106e8565b1161121c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806126d86030913960400191505060405180910390fd5b6000611226611d83565b604001519050600061125561124e61123c6106e8565b6105b886670de0b6b3a7640000611eb2565b8390611fad565b905061125f6125af565b5060408051606081018252438152602081018581529181018381526008805460018101825560009190915282517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee360039092029182015592517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee4840155517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee59092019190915560055461132a9073ffffffffffffffffffffffffffffffffffffffff163330876121a7565b60408051858152905133917fac24935fd910bc682b5ccb1a07b718cadf8cf2f6d1404c4f3ddc3662dae40e29919081900360200190a25050436000908152600360209081526040808320328452909152808220805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00918216811790925533845291909220805490911690911790555050565b6113c7612021565b1561141d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806127326026913960400191505060405180910390fd5b611425612042565b1561147b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806127326026913960400191505060405180910390fd5b33801561152f5761148a6125af565b5073ffffffffffffffffffffffffffffffffffffffff811660009081526007602090815260409182902082516060810184528154815260018201549281019290925260020154918101919091526114e08261053e565b60208201526114ed610cbf565b815273ffffffffffffffffffffffffffffffffffffffff8216600090815260076020908152604091829020835181559083015160018201559101516002909101555b6000821161159e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f427272727262616e6b3a2043616e6e6f74207374616b65203000000000000000604482015290519081900360640190fd5b6115a782612242565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561160f57600080fd5b505afa158015611623573d6000803e3d6000fd5b505050506040513d602081101561163957600080fd5b505133600081815260076020908152604091829020600201939093558051858152905191927f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d92918290030190a25050436000908152600360209081526040808320328452909152808220805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091821681179092553384529190922080549091169091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60045473ffffffffffffffffffffffffffffffffffffffff163314611770576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806126166025913960400191505060405180910390fd5b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b33801561186b576117c66125af565b5073ffffffffffffffffffffffffffffffffffffffff8116600090815260076020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915261181c8261053e565b6020820152611829610cbf565b815273ffffffffffffffffffffffffffffffffffffffff8216600090815260076020908152604091829020835181559083015160018201559101516002909101555b336000908152600760205260409020600101548015611a9f57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118ec57600080fd5b505afa158015611900573d6000803e3d6000fd5b505050506040513d602081101561191657600080fd5b5051600a543360009081526007602052604090206002015461193791611fad565b111561198e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806125f56021913960400191505060405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119f657600080fd5b505afa158015611a0a573d6000803e3d6000fd5b505050506040513d6020811015611a2057600080fd5b50513360008181526007602052604081206002810193909355600190920191909155600554611a689173ffffffffffffffffffffffffffffffffffffffff909116908361211a565b60408051828152905133917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b5050565b60045474010000000000000000000000000000000000000000900460ff1615611b2d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f427272727262616e6b3a20616c726561647920696e697469616c697a65640000604482015290519081900360640190fd5b6005805473ffffffffffffffffffffffffffffffffffffffff8086167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600080548584169083161790556006805492841692909116919091179055611b976125af565b50604080516060810182524380825260006020808401828152848601838152600880546001810182559452855160039485027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee381019190915591517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee4830155517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee5909101556006600955600a91909155600480547fffffffffffffffffffffffff00000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90911674010000000000000000000000000000000000000000171633908117909155845192835293519293927f25ff68dd81b34665b5ba7e553ee5511bf6812e12adb4a7e2c0d9e26b3099ce799281900390910190a250505050565b600654604080517fc5967c26000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163c5967c26916004808301926020929190829003018186803b158015610d4057600080fd5b611d65611d6033610f66565b6107c0565b565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b611d8b6125af565b6008611d95610cbf565b81548110611d9f57fe5b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905090565b611de36125af565b6008611dee83610f8e565b81548110611df857fe5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b600082821115611ea757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b600082611ec157506000611eac565b82820282848281611ece57fe5b0414611f25576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806126946021913960400191505060405180910390fd5b9392505050565b6000808211611f9c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611fa557fe5b049392505050565b600082820183811015611f2557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b43600090815260036020908152604080832032845290915290205460ff1690565b43600090815260036020908152604080832033845290915290205460ff1690565b33600090815260026020526040902054818110156120cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061265e6036913960400191505060405180910390fd5b6001546120d99083611e36565b6001556120e68183611e36565b336000818152600260205260408120929092559054611a9f9173ffffffffffffffffffffffffffffffffffffffff90911690845b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610f299084906122a8565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261223c9085906122a8565b50505050565b60015461224f9082611fad565b6001553360009081526002602052604090205461226c9082611fad565b3360008181526002602052604081209290925590546122a59173ffffffffffffffffffffffffffffffffffffffff9091169030846121a7565b50565b606061230a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166123809092919063ffffffff16565b805190915015610f295780806020019051602081101561232957600080fd5b5051610f29576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612708602a913960400191505060405180910390fd5b60606105c4848460008585612394856124eb565b6123ff57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061246957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161242c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146124cb576040519150601f19603f3d011682016040523d82523d6000602084013e6124d0565b606091505b50915091506124e08282866124f1565b979650505050505050565b3b151590565b60608315612500575081611f25565b8251156125105782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561257457818101518382015260200161255c565b50505050905090810190601f1680156125a15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6040518060600160405280600081526020016000815260200160008152509056fe427272727262616e6b3a20546865206d656d62657220646f6573206e6f74206578697374427272727262616e6b3a207374696c6c20696e20726577617264206c6f636b7570427272727262616e6b3a2063616c6c6572206973206e6f7420746865206f70657261746f72427272727262616e6b3a207374696c6c20696e207769746864726177206c6f636b7570427272727262616e6b3a20776974686472617720726571756573742067726561746572207468616e207374616b656420616d6f756e74536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775f77697468647261774c6f636b757045706f6368733a206f7574206f662072616e6765427272727262616e6b3a2043616e6e6f7420616c6c6f63617465207768656e20746f74616c537570706c7920697320305361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436f6e747261637447756172643a206f6e6520626c6f636b2c206f6e652066756e6374696f6ea2646970667358221220775d883ad2f56dff80c15a462821c189f802a9348c7b4d7e698ac91b647282b664736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3108,
        "contract": "contracts/Brrrrbank.sol:Brrrrbank",
        "label": "share",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)1180"
      },
      {
        "astId": 3110,
        "contract": "contracts/Brrrrbank.sol:Brrrrbank",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3114,
        "contract": "contracts/Brrrrbank.sol:Brrrrbank",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14271,
        "contract": "contracts/Brrrrbank.sol:Brrrrbank",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3247,
        "contract": "contracts/Brrrrbank.sol:Brrrrbank",
        "label": "operator",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3250,
        "contract": "contracts/Brrrrbank.sol:Brrrrbank",
        "label": "initialized",
        "offset": 20,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 3252,
        "contract": "contracts/Brrrrbank.sol:Brrrrbank",
        "label": "brrrr",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)1180"
      },
      {
        "astId": 3254,
        "contract": "contracts/Brrrrbank.sol:Brrrrbank",
        "label": "treasury",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ITreasury)12438"
      },
      {
        "astId": 3258,
        "contract": "contracts/Brrrrbank.sol:Brrrrbank",
        "label": "members",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(Memberseat)3238_storage)"
      },
      {
        "astId": 3261,
        "contract": "contracts/Brrrrbank.sol:Brrrrbank",
        "label": "brrrrbankHistory",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(BrrrrbankSnapshot)3245_storage)dyn_storage"
      },
      {
        "astId": 3263,
        "contract": "contracts/Brrrrbank.sol:Brrrrbank",
        "label": "withdrawLockupEpochs",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3265,
        "contract": "contracts/Brrrrbank.sol:Brrrrbank",
        "label": "rewardLockupEpochs",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(BrrrrbankSnapshot)3245_storage)dyn_storage": {
        "base": "t_struct(BrrrrbankSnapshot)3245_storage",
        "encoding": "dynamic_array",
        "label": "struct Brrrrbank.BrrrrbankSnapshot[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1180": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)12438": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Memberseat)3238_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Brrrrbank.Memberseat)",
        "numberOfBytes": "32",
        "value": "t_struct(Memberseat)3238_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_struct(BrrrrbankSnapshot)3245_storage": {
        "encoding": "inplace",
        "label": "struct Brrrrbank.BrrrrbankSnapshot",
        "members": [
          {
            "astId": 3240,
            "contract": "contracts/Brrrrbank.sol:Brrrrbank",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3242,
            "contract": "contracts/Brrrrbank.sol:Brrrrbank",
            "label": "rewardReceived",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3244,
            "contract": "contracts/Brrrrbank.sol:Brrrrbank",
            "label": "rewardPerShare",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Memberseat)3238_storage": {
        "encoding": "inplace",
        "label": "struct Brrrrbank.Memberseat",
        "members": [
          {
            "astId": 3233,
            "contract": "contracts/Brrrrbank.sol:Brrrrbank",
            "label": "lastSnapshotIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3235,
            "contract": "contracts/Brrrrbank.sol:Brrrrbank",
            "label": "rewardEarned",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3237,
            "contract": "contracts/Brrrrbank.sol:Brrrrbank",
            "label": "epochTimerStart",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}